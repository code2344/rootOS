"""LaunchDaemon/LaunchAgent Hijacking for modern macOS"""
import os
from distutils.version import LooseVersion

from .general import (
    check_daemon_vulnerability,
    check_writable_daemon_files,
    confirm_sudoers_modification,
    DEFAULT_COMMAND,
)

__cve__ = "2024-DAEMON-HIJACK"
__credits__ = "Security Research"


def vulnerable(version):
    """checks vulnerability"""
    # This technique works on macOS Sequoia (15.x) and potentially newer versions
    # Check if there are writable daemon files
    if version >= LooseVersion("15.0"):
        writable_files = check_writable_daemon_files()
        return len(writable_files) > 0
    return False


def run():
    """runs exploit"""
    print("\n[*] Checking for writable daemon files...")
    
    if not check_daemon_vulnerability():
        print("[-] User declined to proceed with daemon file exploitation.")
        return False
    
    if not confirm_sudoers_modification():
        print("[-] User declined sudoers modification. Aborting exploit.")
        return False
    
    writable_files = check_writable_daemon_files()
    
    if not writable_files:
        print("[-] No writable daemon files found.")
        return False
    
    print(f"[+] Found {len(writable_files)} writable daemon file(s)")
    
    # For demonstration purposes, we log the files but don't actually modify them
    # In a real penetration test, this would be used to create a malicious daemon
    print("[*] This exploit would hijack writable daemon files to escalate privileges")
    print("[!] In a real scenario, the following files could be exploited:")
    for file_path in writable_files:
        print(f"    - {file_path}")
    
    return False  # Return False for safety - actual exploitation requires manual intervention
